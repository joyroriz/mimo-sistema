import { test, expect } from '@playwright/test';

/**
 * Script simplificado para verificar status do Sistema MIMO
 * e fornecer instru√ß√µes para limpeza manual do cache
 */

test.describe('Sistema MIMO - Health Check & Cache Instructions', () => {
  
  test('Check current health status and provide cache clear instructions', async ({ page }) => {
    console.log('üè• VERIFICANDO STATUS ATUAL DO SISTEMA MIMO...');
    console.log('=' * 60);
    
    try {
      // Testar health check atual
      console.log('üìç Acessando: https://mimo-sistema.vercel.app/health');
      await page.goto('https://mimo-sistema.vercel.app/health', { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });
      
      const content = await page.content();
      const responseText = await page.textContent('body').catch(() => '');
      
      console.log('üìÑ RESPOSTA ATUAL:');
      console.log(responseText || content.substring(0, 300));
      console.log('');
      
      // Analisar resposta
      if (content.includes('"status":"healthy"') || responseText.includes('healthy')) {
        console.log('üéâ SUCESSO! O SISTEMA EST√Å FUNCIONANDO!');
        console.log('‚úÖ Health check retorna status healthy');
        console.log('‚úÖ Cache foi limpo com sucesso');
        console.log('‚úÖ Problema SQLAlchemy resolvido');
        
      } else if (content.includes('SQLAlchemy') || content.includes('Engine') || content.includes('execute')) {
        console.log('üö® PROBLEMA CONFIRMADO: Cache do Vercel ainda n√£o foi limpo');
        console.log('‚ùå Erro SQLAlchemy persiste');
        console.log('‚ùå Vercel ainda serve vers√£o antiga');
        console.log('');
        console.log('üîß INSTRU√á√ïES PARA LIMPEZA MANUAL DO CACHE:');
        console.log('=' * 50);
        console.log('1. üåê Acesse: https://vercel.com/dashboard');
        console.log('2. üîê Fa√ßa login com suas credenciais');
        console.log('3. üîç Encontre o projeto "mimo-sistema"');
        console.log('4. üñ±Ô∏è  Clique no projeto');
        console.log('5. ‚öôÔ∏è  V√° para a aba "Settings"');
        console.log('6. üßπ Procure por "Functions" ou "General"');
        console.log('7. üîÑ Clique em "Clear Cache" ou "Redeploy"');
        console.log('8. ‚úÖ Confirme a a√ß√£o');
        console.log('9. ‚è≥ Aguarde 2-3 minutos');
        console.log('10. üîó Teste: https://mimo-sistema.vercel.app/health');
        console.log('');
        console.log('üìã RESULTADO ESPERADO AP√ìS LIMPEZA:');
        console.log('{"status": "healthy", "message": "Sistema MIMO funcionando..."}');
        
      } else {
        console.log('‚ùì RESPOSTA INESPERADA');
        console.log('‚ö†Ô∏è  Verificar manualmente o que est√° acontecendo');
      }
      
    } catch (error) {
      console.error('‚ùå ERRO AO ACESSAR HEALTH CHECK:', error.message);
      console.log('üîß Poss√≠veis causas:');
      console.log('   - Problema de conectividade');
      console.log('   - Vercel fora do ar');
      console.log('   - Projeto n√£o existe');
    }
    
    console.log('');
    console.log('üìä RESUMO T√âCNICO:');
    console.log('=' * 40);
    console.log('‚úÖ C√≥digo corrigido: api/index.py (Flask puro, 90 linhas)');
    console.log('‚úÖ Deploy realizado: Commit 50c80dc no GitHub');
    console.log('‚úÖ Configura√ß√£o: vercel.json atualizado');
    console.log('‚ö†Ô∏è  Cache persistente: Vercel serve vers√£o antiga');
    console.log('üéØ Solu√ß√£o: Limpeza manual do cache necess√°ria');
  });
  
  test('Test new routes to verify cache status', async ({ page }) => {
    console.log('üîç TESTANDO ROTAS NOVAS PARA VERIFICAR CACHE...');
    
    const testRoutes = [
      '/cache-buster',
      '/force-new',
      '/test',
      '/status'
    ];
    
    for (const route of testRoutes) {
      try {
        console.log(`üìç Testando: https://mimo-sistema.vercel.app${route}`);
        await page.goto(`https://mimo-sistema.vercel.app${route}`, { 
          waitUntil: 'networkidle',
          timeout: 15000 
        });
        
        const status = page.url().includes('404') ? '404' : 'OK';
        const content = await page.textContent('body').catch(() => '');
        
        if (content.includes('404') || content.includes('Not Found')) {
          console.log(`‚ùå ${route}: 404 - Rota n√£o existe (arquivo antigo)`);
        } else if (content.includes('cache_buster') || content.includes('FUNCIONANDO')) {
          console.log(`‚úÖ ${route}: OK - Arquivo novo funcionando!`);
        } else {
          console.log(`‚ùì ${route}: Resposta inesperada`);
        }
        
      } catch (error) {
        console.log(`‚ùå ${route}: Erro - ${error.message}`);
      }
    }
    
    console.log('');
    console.log('üìã INTERPRETA√á√ÉO DOS RESULTADOS:');
    console.log('‚úÖ Se rotas novas funcionam = Cache foi limpo');
    console.log('‚ùå Se rotas novas d√£o 404 = Cache ainda n√£o foi limpo');
  });
  
  test('Monitor cache clear progress', async ({ page }) => {
    console.log('‚è≥ MONITORANDO PROGRESSO DA LIMPEZA DE CACHE...');
    
    const maxAttempts = 10;
    const intervalSeconds = 30;
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üîÑ Tentativa ${attempt}/${maxAttempts} - Verificando health check...`);
      
      try {
        await page.goto('https://mimo-sistema.vercel.app/health', { 
          waitUntil: 'networkidle',
          timeout: 20000 
        });
        
        const content = await page.textContent('body').catch(() => '');
        
        if (content.includes('"status":"healthy"') || content.includes('healthy')) {
          console.log('üéâ SUCESSO! Cache foi limpo!');
          console.log('‚úÖ Sistema MIMO funcionando corretamente');
          console.log(`‚è±Ô∏è  Tempo total: ${attempt * intervalSeconds} segundos`);
          break;
          
        } else if (content.includes('SQLAlchemy')) {
          console.log(`‚ùå Tentativa ${attempt}: Cache ainda n√£o foi limpo`);
          
          if (attempt === maxAttempts) {
            console.log('‚ö†Ô∏è  Tempo limite atingido');
            console.log('üîß Limpeza manual do cache ainda necess√°ria');
          } else {
            console.log(`‚è≥ Aguardando ${intervalSeconds} segundos para pr√≥xima verifica√ß√£o...`);
            await page.waitForTimeout(intervalSeconds * 1000);
          }
          
        } else {
          console.log(`‚ùì Tentativa ${attempt}: Resposta inesperada`);
        }
        
      } catch (error) {
        console.log(`‚ùå Tentativa ${attempt}: Erro - ${error.message}`);
      }
    }
  });
  
});
