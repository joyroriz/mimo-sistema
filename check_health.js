/**
 * Script simples para verificar status do Sistema MIMO
 * e fornecer instru√ß√µes para limpeza do cache do Vercel
 */

const https = require('https');

console.log('üè• VERIFICANDO NOVO DEPLOYMENT DO SISTEMA MIMO...');
console.log('üîó URL: https://mimo-sistema-final.vercel.app/');
console.log('='.repeat(60));

function checkHealth() {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'mimo-sistema-final.vercel.app',
            port: 443,
            path: '/health',
            method: 'GET',
            timeout: 10000
        };

        const req = https.request(options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    data: data
                });
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        req.end();
    });
}

async function main() {
    try {
        console.log('üìç Acessando: https://mimo-sistema-final.vercel.app/health');
        
        const response = await checkHealth();
        
        console.log(`üìä Status Code: ${response.statusCode}`);
        console.log('üìÑ RESPOSTA ATUAL:');
        console.log(response.data);
        console.log('');
        
        // Analisar resposta
        if (response.data.includes('"status":"healthy"')) {
            console.log('üéâ SUCESSO! O SISTEMA EST√Å FUNCIONANDO!');
            console.log('‚úÖ Health check retorna status healthy');
            console.log('‚úÖ Cache foi limpo com sucesso');
            console.log('‚úÖ Problema SQLAlchemy resolvido');
            
        } else if (response.data.includes('SQLAlchemy') || response.data.includes('Engine') || response.data.includes('execute')) {
            console.log('üö® PROBLEMA CONFIRMADO: Cache do Vercel ainda n√£o foi limpo');
            console.log('‚ùå Erro SQLAlchemy persiste');
            console.log('‚ùå Vercel ainda serve vers√£o antiga');
            console.log('');
            console.log('üîß INSTRU√á√ïES PARA LIMPEZA MANUAL DO CACHE:');
            console.log('='.repeat(50));
            console.log('1. üåê Acesse: https://vercel.com/dashboard');
            console.log('2. üîê Fa√ßa login com suas credenciais');
            console.log('3. üîç Encontre o projeto "mimo-sistema"');
            console.log('4. üñ±Ô∏è  Clique no projeto');
            console.log('5. ‚öôÔ∏è  V√° para a aba "Settings"');
            console.log('6. üßπ Procure por "Functions" ou "General"');
            console.log('7. üîÑ Clique em "Clear Cache" ou "Redeploy"');
            console.log('8. ‚úÖ Confirme a a√ß√£o');
            console.log('9. ‚è≥ Aguarde 2-3 minutos');
            console.log('10. üîó Teste: https://mimo-sistema.vercel.app/health');
            console.log('');
            console.log('üìã RESULTADO ESPERADO AP√ìS LIMPEZA:');
            console.log('{"status": "healthy", "message": "Sistema MIMO funcionando..."}');
            
        } else {
            console.log('‚ùì RESPOSTA INESPERADA');
            console.log('‚ö†Ô∏è  Verificar manualmente o que est√° acontecendo');
        }
        
    } catch (error) {
        console.error('‚ùå ERRO AO ACESSAR HEALTH CHECK:', error.message);
        console.log('üîß Poss√≠veis causas:');
        console.log('   - Problema de conectividade');
        console.log('   - Vercel fora do ar');
        console.log('   - Projeto n√£o existe');
    }
    
    console.log('');
    console.log('üìä RESUMO T√âCNICO:');
    console.log('='.repeat(40));
    console.log('‚úÖ C√≥digo corrigido: api/index.py (Flask puro, 90 linhas)');
    console.log('‚úÖ Deploy realizado: Commit 50c80dc no GitHub');
    console.log('‚úÖ Configura√ß√£o: vercel.json atualizado');
    console.log('‚ö†Ô∏è  Cache persistente: Vercel serve vers√£o antiga');
    console.log('üéØ Solu√ß√£o: Limpeza manual do cache necess√°ria');
    
    // Testar rotas novas
    console.log('');
    console.log('üîç TESTANDO ROTAS NOVAS PARA VERIFICAR CACHE...');
    
    const testRoutes = ['/cache-buster', '/force-new', '/test', '/status'];
    
    for (const route of testRoutes) {
        try {
            console.log(`üìç Testando: https://mimo-sistema.vercel.app${route}`);
            
            const routeResponse = await new Promise((resolve, reject) => {
                const options = {
                    hostname: 'mimo-sistema.vercel.app',
                    port: 443,
                    path: route,
                    method: 'GET',
                    timeout: 5000
                };

                const req = https.request(options, (res) => {
                    let data = '';
                    res.on('data', (chunk) => { data += chunk; });
                    res.on('end', () => resolve({ statusCode: res.statusCode, data }));
                });

                req.on('error', reject);
                req.on('timeout', () => {
                    req.destroy();
                    reject(new Error('Timeout'));
                });
                req.end();
            });
            
            if (routeResponse.statusCode === 404 || routeResponse.data.includes('404') || routeResponse.data.includes('Not Found')) {
                console.log(`‚ùå ${route}: 404 - Rota n√£o existe (arquivo antigo)`);
            } else if (routeResponse.data.includes('cache_buster') || routeResponse.data.includes('FUNCIONANDO')) {
                console.log(`‚úÖ ${route}: OK - Arquivo novo funcionando!`);
            } else {
                console.log(`‚ùì ${route}: Status ${routeResponse.statusCode}`);
            }
            
        } catch (error) {
            console.log(`‚ùå ${route}: Erro - ${error.message}`);
        }
    }
    
    console.log('');
    console.log('üìã INTERPRETA√á√ÉO DOS RESULTADOS:');
    console.log('‚úÖ Se rotas novas funcionam = Cache foi limpo');
    console.log('‚ùå Se rotas novas d√£o 404 = Cache ainda n√£o foi limpo');
    console.log('');
    console.log('üéØ PR√ìXIMA A√á√ÉO: Limpar cache do Vercel manualmente');
}

main().catch(console.error);
